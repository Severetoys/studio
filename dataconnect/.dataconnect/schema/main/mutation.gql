extend type Mutation {
  """
  ✨ Insert a single `MediaAsset` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  mediaAsset_insert(
    """
    Data object to insert into the table.
    """
    data: MediaAsset_Data!
  ): MediaAsset_KeyOutput! @fdc_generated(from: "MediaAsset", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `PlatformPost` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  platformPost_insert(
    """
    Data object to insert into the table.
    """
    data: PlatformPost_Data!
  ): PlatformPost_KeyOutput! @fdc_generated(from: "PlatformPost", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Post` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  post_insert(
    """
    Data object to insert into the table.
    """
    data: Post_Data!
  ): Post_KeyOutput! @fdc_generated(from: "Post", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `ProductService` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  productService_insert(
    """
    Data object to insert into the table.
    """
    data: ProductService_Data!
  ): ProductService_KeyOutput! @fdc_generated(from: "ProductService", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `SocialAccount` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  socialAccount_insert(
    """
    Data object to insert into the table.
    """
    data: SocialAccount_Data!
  ): SocialAccount_KeyOutput! @fdc_generated(from: "SocialAccount", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Transaction` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  transaction_insert(
    """
    Data object to insert into the table.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput! @fdc_generated(from: "Transaction", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `MediaAsset` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  mediaAsset_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [MediaAsset_Data!]!
  ): [MediaAsset_KeyOutput!]! @fdc_generated(from: "MediaAsset", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `PlatformPost` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  platformPost_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [PlatformPost_Data!]!
  ): [PlatformPost_KeyOutput!]! @fdc_generated(from: "PlatformPost", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Post` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  post_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Post_Data!]!
  ): [Post_KeyOutput!]! @fdc_generated(from: "Post", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `ProductService` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  productService_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [ProductService_Data!]!
  ): [ProductService_KeyOutput!]! @fdc_generated(from: "ProductService", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `SocialAccount` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  socialAccount_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [SocialAccount_Data!]!
  ): [SocialAccount_KeyOutput!]! @fdc_generated(from: "SocialAccount", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Transaction` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  transaction_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Transaction_Data!]!
  ): [Transaction_KeyOutput!]! @fdc_generated(from: "Transaction", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `MediaAsset` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `MediaAsset`.
  """
  mediaAsset_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: MediaAsset_Data!
  ): MediaAsset_KeyOutput! @fdc_generated(from: "MediaAsset", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `PlatformPost` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `PlatformPost`.
  """
  platformPost_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: PlatformPost_Data!
  ): PlatformPost_KeyOutput! @fdc_generated(from: "PlatformPost", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Post` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Post`.
  """
  post_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Post_Data!
  ): Post_KeyOutput! @fdc_generated(from: "Post", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `ProductService` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ProductService`.
  """
  productService_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: ProductService_Data!
  ): ProductService_KeyOutput! @fdc_generated(from: "ProductService", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `SocialAccount` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `SocialAccount`.
  """
  socialAccount_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: SocialAccount_Data!
  ): SocialAccount_KeyOutput! @fdc_generated(from: "SocialAccount", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Transaction` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Transaction`.
  """
  transaction_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput! @fdc_generated(from: "Transaction", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `MediaAsset` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `MediaAsset`.
  """
  mediaAsset_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [MediaAsset_Data!]!
  ): [MediaAsset_KeyOutput!]! @fdc_generated(from: "MediaAsset", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `PlatformPost` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `PlatformPost`.
  """
  platformPost_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [PlatformPost_Data!]!
  ): [PlatformPost_KeyOutput!]! @fdc_generated(from: "PlatformPost", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Post` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Post`.
  """
  post_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Post_Data!]!
  ): [Post_KeyOutput!]! @fdc_generated(from: "Post", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `ProductService` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ProductService`.
  """
  productService_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [ProductService_Data!]!
  ): [ProductService_KeyOutput!]! @fdc_generated(from: "ProductService", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `SocialAccount` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `SocialAccount`.
  """
  socialAccount_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [SocialAccount_Data!]!
  ): [SocialAccount_KeyOutput!]! @fdc_generated(from: "SocialAccount", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Transaction` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Transaction`.
  """
  transaction_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Transaction_Data!]!
  ): [Transaction_KeyOutput!]! @fdc_generated(from: "Transaction", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `MediaAsset` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `MediaAsset` or `null` if not found.
  """
  mediaAsset_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: MediaAsset_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MediaAsset_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: MediaAsset_Data!
  ): MediaAsset_KeyOutput @fdc_generated(from: "MediaAsset", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `PlatformPost` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `PlatformPost` or `null` if not found.
  """
  platformPost_update(
    """
    The key used to identify the object.
    """
    key: PlatformPost_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: PlatformPost_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: PlatformPost_Data!
  ): PlatformPost_KeyOutput @fdc_generated(from: "PlatformPost", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Post` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Post` or `null` if not found.
  """
  post_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Post_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Post_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Post_Data!
  ): Post_KeyOutput @fdc_generated(from: "Post", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `ProductService` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `ProductService` or `null` if not found.
  """
  productService_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ProductService_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ProductService_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: ProductService_Data!
  ): ProductService_KeyOutput @fdc_generated(from: "ProductService", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `SocialAccount` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `SocialAccount` or `null` if not found.
  """
  socialAccount_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SocialAccount_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SocialAccount_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: SocialAccount_Data!
  ): SocialAccount_KeyOutput @fdc_generated(from: "SocialAccount", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Transaction` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Transaction` or `null` if not found.
  """
  transaction_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Transaction_Data!
  ): Transaction_KeyOutput @fdc_generated(from: "Transaction", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `MediaAsset` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  mediaAsset_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: MediaAsset_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: MediaAsset_Data!
  ): Int! @fdc_generated(from: "MediaAsset", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `PlatformPost` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  platformPost_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: PlatformPost_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: PlatformPost_Data!
  ): Int! @fdc_generated(from: "PlatformPost", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Post` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  post_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Post_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Post_Data!
  ): Int! @fdc_generated(from: "Post", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `ProductService` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  productService_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: ProductService_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: ProductService_Data!
  ): Int! @fdc_generated(from: "ProductService", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `SocialAccount` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  socialAccount_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: SocialAccount_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: SocialAccount_Data!
  ): Int! @fdc_generated(from: "SocialAccount", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Transaction` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  transaction_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Transaction_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Transaction_Data!
  ): Int! @fdc_generated(from: "Transaction", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `MediaAsset` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  mediaAsset_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: MediaAsset_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MediaAsset_FirstRow
  ): MediaAsset_KeyOutput @fdc_generated(from: "MediaAsset", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `PlatformPost` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  platformPost_delete(
    """
    The key used to identify the object.
    """
    key: PlatformPost_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: PlatformPost_FirstRow
  ): PlatformPost_KeyOutput @fdc_generated(from: "PlatformPost", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Post` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  post_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Post_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Post_FirstRow
  ): Post_KeyOutput @fdc_generated(from: "Post", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `ProductService` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  productService_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ProductService_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ProductService_FirstRow
  ): ProductService_KeyOutput @fdc_generated(from: "ProductService", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `SocialAccount` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  socialAccount_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SocialAccount_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SocialAccount_FirstRow
  ): SocialAccount_KeyOutput @fdc_generated(from: "SocialAccount", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Transaction` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  transaction_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow
  ): Transaction_KeyOutput @fdc_generated(from: "Transaction", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `MediaAsset` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  mediaAsset_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: MediaAsset_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "MediaAsset", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `PlatformPost` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  platformPost_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: PlatformPost_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "PlatformPost", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Post` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  post_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Post_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Post", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `ProductService` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  productService_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: ProductService_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "ProductService", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `SocialAccount` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  socialAccount_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: SocialAccount_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "SocialAccount", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Transaction` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  transaction_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Transaction_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Transaction", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
