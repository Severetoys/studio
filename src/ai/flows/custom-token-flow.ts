'use server';
/**
 * @fileOverview Example of how to generate a Firebase Custom Token using the Firebase Admin SDK.
 * This code must be executed in a secure backend environment.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';
import { getAuth } from 'firebase-admin/auth';
import { adminApp } from '@/lib/firebase-admin'; // Use the centralized admin app

const GenerateTokenInputSchema = z.object({
  uid: z.string().describe('The unique user ID (UID) for which the token will be generated.'),
  premium: z.boolean().optional().describe('An example field for custom claims.'),
});

const GenerateTokenOutputSchema = z.object({
  customToken: z.string().describe('The custom token generated by Firebase.'),
});


export async function generateCustomFirebaseToken(input: z.infer<typeof GenerateTokenInputSchema>): Promise<z.infer<typeof GenerateTokenOutputSchema>> {
  return generateCustomTokenFlow(input);
}


const generateCustomTokenFlow = ai.defineFlow(
  {
    name: 'generateCustomTokenFlow',
    inputSchema: GenerateTokenInputSchema,
    outputSchema: GenerateTokenOutputSchema,
  },
  async (input) => {
    // The adminApp is already initialized, so we can use it directly.
    const auth = getAuth(adminApp);
    
    const { uid } = input;
    const additionalClaims = {
      premium: input.premium || false,
    };
    
    try {
      const customToken = await auth.createCustomToken(uid, additionalClaims);
      
      console.log(`[generateCustomTokenFlow] Custom token successfully generated for UID: ${uid}`);
      
      return { customToken };

    } catch (error: any) {
      console.error('[generateCustomTokenFlow] Error generating custom token:', error.message);
      throw new Error(`Failed to generate token: ${error.message}`);
    }
  }
);
